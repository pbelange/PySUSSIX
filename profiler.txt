               amplitude  frequency
0   10.000034+ 0.000000j   0.310258
1    0.588237- 0.000016j   0.310425
2    0.588240+ 0.000029j   0.310091
3    0.153848- 0.000014j   0.310591
4    0.153848+ 0.000015j   0.309925
5    0.068967- 0.000008j   0.310758
6    0.068967+ 0.000008j   0.309758
7    0.038911- 0.000005j   0.310925
8    0.038911+ 0.000005j   0.309591
9    0.024938- 0.000000j   0.308258
10   0.024938+ 0.000000j   0.312258
11   0.024938- 0.000000j   0.311091
12   0.024938+ 0.000000j   0.309425
13   0.001467- 0.000000j   0.312425
14   0.001467+ 0.000000j   0.308091
15   0.001467- 0.000000j   0.308425
16   0.001467+ 0.000000j   0.312091
17   0.000384- 0.000000j   0.312591
18   0.000384+ 0.000000j   0.307925
19   0.000384- 0.000000j   0.308591
20   0.000384+ 0.000000j   0.311925
21   0.000172- 0.000000j   0.312758
22   0.000172+ 0.000000j   0.307758
23   0.000172- 0.000000j   0.308758
24   0.000172+ 0.000000j   0.311758
25   0.000097- 0.000000j   0.312925
26   0.000097+ 0.000000j   0.307591
27   0.000097- 0.000000j   0.308925
28   0.000097+ 0.000000j   0.311591
29   0.000062+ 0.000000j   0.313091
30   0.000062- 0.000000j   0.307425
31   0.000062+ 0.000000j   0.309091
elapsed time: 2.2715 s
Wrote profile results to profile_test.py.lprof
Timer unit: 1e-06 s

Total time: 0.944765 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: Laskar_DFFT at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def Laskar_DFFT(freq,N,z):
    39                                               """
    40                                               Discrete fourier transform of z, as defined in A. Wolski, Sec. 11.5.
    41                                               In a typical DFFT , freq = m/Nt where m is an integer. Here m could take any value.
    42                                               Note: this will differ from sussix.f.calcr by a factor 1/Nt (but does not slow the convergence of the Newton method, so not a problem)
    43                                               ----------------------------------------------------
    44                                                   freq: discrete frequency to evaluate the DFFT at
    45                                                   N   : turn numbers of the signal
    46                                                   z   : complex array of the signal
    47                                               ----------------------------------------------------
    48                                               """
    49       543        336.0      0.6      0.0      Nt = len(z)
    50       543     944429.0   1739.3    100.0      return np.sum(1/Nt*np.exp(-2*np.pi*1j*freq*N)*z)

Total time: 1.14531 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: Laskar_DFFT_derivative at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                           @profile
    53                                           def Laskar_DFFT_derivative(freq,N,z):
    54                                               """
    55                                               Derivative of laskar_DFFT w.r.t freq
    56                                               Note: differs from exact derivative by a factor -2pi (but allows newton method to converge)
    57                                               """
    58       511        286.0      0.6      0.0      Nt = len(z)
    59       511      93452.0    182.9      8.2      deriv_factor = 1j*N
    60       511    1051570.0   2057.9     91.8      return np.sum(1/Nt*deriv_factor*1*np.exp(-2*np.pi*1j*freq*N)*z)

Total time: 2.20339 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: fundamental_frequency at line 87

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    87                                           @profile
    88                                           def fundamental_frequency(x,px,Hann_order = 1,optimization = 'fortran'):
    89                                               """
    90                                               Subroutine of the NAFF algorithm. 
    91                                               1. Applies a Hann window
    92                                               2. Estimates the fundamental frequency with an FFT 
    93                                               3. Refines the estimate with a complex Newton method
    94                                               4. Returns the main frequency and the amplitude.
    95                                               """
    96                                           
    97                                               # Windowing of the signal
    98        32       2189.0     68.4      0.1      N   = np.arange(len(x))
    99        32      19231.0    601.0      0.9      z   = np.array(x) - 1j*np.array(px)
   100        32      24155.0    754.8      1.1      z_w = z * Hann(N, Nt=len(z),p=Hann_order)
   101                                               
   102                                               # Estimation of the tune with FFT
   103        32      37219.0   1163.1      1.7      tune_est,resolution = FFT_tune_estimate(z_w)
   104                                           
   105                                               # Preparing the estimate for the Newton refinement method
   106        32         29.0      0.9      0.0      if tune_est >= 0.5:
   107                                                   tune_est = -(1.0 - tune_est)
   108        32         22.0      0.7      0.0      tune_est = tune_est - resolution
   109                                           
   110                                               # Refinement of the tune calulation
   111        32          8.0      0.2      0.0      if optimization == 'fortran':
   112                                                   tune,amplitude = f90newton_method(z_w,tune_est,resolution)
   113                                               else:
   114        32    2120533.0  66266.7     96.2          tune,amplitude = newton_method(z_w,N,tune_est,resolution)
   115                                           
   116        32          3.0      0.1      0.0      return tune,amplitude

Total time: 2.27128 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: NAFF at line 118

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                           @profile
   119                                           def NAFF(x,px,number_of_harmonics = 5,Hann_order = 1,optimization = 'fortran'):
   120                                               """
   121                                               Applies the NAFF algorithm to find the spectral lines of a signal.
   122                                               """
   123                                           
   124         1          4.0      4.0      0.0      assert number_of_harmonics >=1, 'number_of_harmonics needs to be > 1'
   125                                               
   126                                               # Converting to numpy arrays
   127         1        159.0    159.0      0.0      x,px = np.array(x),np.array(px)
   128                                           
   129                                               # initialisation
   130         1        466.0    466.0      0.0      z  = x - 1j*px
   131         1         76.0     76.0      0.0      N  = np.arange(len(x))
   132                                               
   133                                               
   134         1          1.0      1.0      0.0      frequencies = []
   135         1          0.0      0.0      0.0      amplitudes  = [] 
   136        33         17.0      0.5      0.0      for _ in range(number_of_harmonics):
   137                                           
   138                                                   # Computing frequency and amplitude
   139        32    2209548.0  69048.4     97.3          freq,amp  = fundamental_frequency(x,px,Hann_order=Hann_order,optimization=optimization)
   140                                           
   141                                                   # Saving results
   142        32         31.0      1.0      0.0          frequencies.append(freq)
   143        32         20.0      0.6      0.0          amplitudes.append(amp)
   144                                           
   145                                                   # Substraction procedure
   146        32      54263.0   1695.7      2.4          zgs  = amp * np.exp(2 * np.pi * 1j * freq * N)
   147        32       2136.0     66.8      0.1          z   -= zgs
   148        32       3845.0    120.2      0.2          x,px = np.real(z), -np.imag(z)
   149                                           
   150                                               
   151         1        714.0    714.0      0.0      return pd.DataFrame({'amplitude':amplitudes,'frequency':frequencies})

Total time: 2.2715 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: get_harmonics at line 154

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   154                                           @profile
   155                                           def get_harmonics(x = None,px = None,y = None,py = None,zeta = None,pzeta = None,number_of_harmonics = 5,Hann_order = 1,optimization = 'fortran'):
   156                                               """
   157                                               Computes the spectrum of a tracking data set for all canonical pairs provided
   158                                               """
   159                                           
   160         1          2.0      2.0      0.0      results = {}
   161         4          2.0      0.5      0.0      for pair in [(x,px,'x'),(y,py,'y'),(zeta,pzeta,'zeta')]:
   162         3          1.0      0.3      0.0          z,pz,plane = pair
   163                                                   
   164         3          1.0      0.3      0.0          if z is not None:
   165         1          0.0      0.0      0.0              if pz is None:
   166                                                           pz = np.zeros(len(z))
   167                                           
   168                                                       # Computing spectral lines
   169         2    2271494.0    1e+06    100.0              df = NAFF(z,pz, number_of_harmonics = number_of_harmonics,
   170         1          1.0      1.0      0.0                                  Hann_order      = Hann_order,
   171         1          0.0      0.0      0.0                                  optimization    = optimization)
   172                                                       
   173         1          1.0      1.0      0.0              results[plane] = df
   174                                           
   175                                                   else:
   176         2          0.0      0.0      0.0              results[plane] = None
   177                                           
   178                                           
   179         1          0.0      0.0      0.0      return results

Total time: 2.11924 s
File: /Users/pbelanger/ABPLocal/PySUSSIX/PySUSSIX/ducksussix/ducksussix.py
Function: newton_method at line 229

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   229                                           @profile
   230                                           def newton_method(z,N,tune_est,resolution):
   231                                               # Increase resolution by factor 5
   232        32         25.0      0.8      0.0      resolution /= 5
   233                                           
   234        32         54.0      1.7      0.0      tune_test = np.zeros(10)
   235        32         13.0      0.4      0.0      tune_val  = np.zeros(10)
   236                                           
   237                                           
   238        32      53954.0   1686.1      2.5      DFFT   = Laskar_DFFT(tune_est,N,z)
   239        32      71745.0   2242.0      3.4      DFFT_d = Laskar_DFFT_derivative(tune_est,N,z)
   240        32         93.0      2.9      0.0      dtunea1 = DFFT.real*DFFT_d.real + DFFT.imag*DFFT_d.imag
   241                                           
   242                                           
   243                                               # old name
   244        32          4.0      0.1      0.0      tunea1 = tune_est
   245        32          3.0      0.1      0.0      deltat = resolution
   246        32         11.0      0.3      0.0      err    = 1e-10
   247        32          4.0      0.1      0.0      num    = 0
   248                                               
   249                                           
   250        32      54850.0   1714.1      2.6      DFFT   = Laskar_DFFT(tunea1,N,z)
   251        32      73634.0   2301.1      3.5      DFFT_d = Laskar_DFFT_derivative(tunea1,N,z)
   252                                           
   253                                               
   254        32         71.0      2.2      0.0      dtunea1 = DFFT.real*DFFT_d.real + DFFT.imag*DFFT_d.imag
   255                                           
   256                                           
   257                                           
   258        32          9.0      0.3      0.0      tunea2 = 0
   259        32          5.0      0.2      0.0      dtunea2 = 0
   260                                               
   261       352        209.0      0.6      0.0      for ntest in range(1, 11):
   262       320         90.0      0.3      0.0          tunea2 = tunea1+deltat
   263                                           
   264       320     557095.0   1740.9     26.3          DFFT   = Laskar_DFFT(tunea2,N,z)
   265       320     734970.0   2296.8     34.7          DFFT_d = Laskar_DFFT_derivative(tunea2,N,z)
   266       320        652.0      2.0      0.0          dtunea2 = DFFT.real*DFFT_d.real + DFFT.imag*DFFT_d.imag
   267                                           
   268                                                   
   269       320        316.0      1.0      0.0          if (dtunea1 <= 0) and (dtunea2 >= 0):
   270        32         16.0      0.5      0.0              tune1, tune2, dtune1, dtune2 = tunea1, tunea2, dtunea1, dtunea2
   271                                           
   272                                                       
   273       127        100.0      0.8      0.0              for ncont in range(1, 101):
   274       127        147.0      1.2      0.0                  ratio = -dtune1 / dtune2 if abs(dtune2) > 0 else 0.0
   275                                           
   276       127         68.0      0.5      0.0                  tune3 = (tune1 + ratio * tune2) / (1.0 + ratio)
   277                                           
   278                                                           
   279       127     226277.0   1781.7     10.7                  DFFT   = Laskar_DFFT(tune3,N,z)
   280       127     287835.0   2266.4     13.6                  DFFT_d = Laskar_DFFT_derivative(tune3,N,z)
   281       127        266.0      2.1      0.0                  dtune3 = DFFT.real*DFFT_d.real + DFFT.imag*DFFT_d.imag
   282                                           
   283                                           
   284       127         90.0      0.7      0.0                  if dtune3 <= 0.0:
   285        66         27.0      0.4      0.0                      if tune1 == tune3:
   286         3          3.0      1.0      0.0                          break
   287        63         19.0      0.3      0.0                      tune1, dtune1 = tune3, dtune3
   288                                                           else:
   289        61         10.0      0.2      0.0                      if tune2 == tune3:
   290         1          1.0      1.0      0.0                          break
   291        60         15.0      0.2      0.0                      tune2, dtune2 = tune3, dtune3
   292                                           
   293       123        144.0      1.2      0.0                  if abs(tune2 - tune1) <= err:
   294        28          5.0      0.2      0.0                      break
   295                                           
   296                                                       
   297        32         59.0      1.8      0.0              tune_test[num] = tune3
   298        32        153.0      4.8      0.0              tune_val[num]  = np.abs(DFFT)
   299        32         29.0      0.9      0.0              num += 1
   300                                                       
   301                                           
   302                                           
   303       320        115.0      0.4      0.0          tunea1, dtunea1 = tunea2, dtunea2
   304                                           
   305        32        375.0     11.7      0.0      idx_max = np.argmax(tune_val[:num])
   306        32         33.0      1.0      0.0      tune      = tune_test[idx_max]
   307        32      55631.0   1738.5      2.6      amplitude = Laskar_DFFT(tune,N,z)
   308        32         12.0      0.4      0.0      return tune,amplitude

